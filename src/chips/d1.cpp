/*
 * Copyright (c) 2022, YuzukiTsuru <GloomyGhost@GloomyGhost.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * See README and LICENSE for more details.
 */

//
// Created by gloom on 2022/9/23.
//

#include "d1.h"

d1::d1(class fel *f, chip_version_t chip_version) : Chips(f, chip_version) {
    chip_info.chip_name = "D1-H/D1s/F133-A/F133-B/R528-RV";
    chip_info.chip_id = 0x00185900;
    chip_info.chip_type = chip_type_e::Heterogeneous;
    chip_info.chip_core = core_name_.XuantieC906;
    chip_info.chip_core_count = 1;
    chip_info.chip_core_count_str = core_count_.core_count_1;
    chip_info.chip_heterogeneous_core.push_back("HIFI4");

    dram_info.append(ddr2);
    dram_info.append(ddr3);
}

chip_function_e d1::check_chip_id() {
    chip_id_map_[0x5000] = QString("D1-H");
    chip_id_map_[0x5c00] = QString("F133-A");
    chip_id_map_[0x5e00] = QString("D1s");
    chip_id_map_[0x7000] = QString("R528-RV ES");
    chip_id_map_[0x7400] = QString("F133-B");

    const uint8_t payload[] = {
            0x37, 0x03, 0x40, 0x00, 0x73, 0x20, 0x03, 0x7c, 0x37, 0x03, 0x03, 0x00,
            0x1b, 0x03, 0x33, 0x01, 0x73, 0x20, 0x23, 0x7c, 0x6f, 0x00, 0x40, 0x00,
            0x13, 0x01, 0x01, 0xfe, 0x23, 0x34, 0x81, 0x00, 0x23, 0x38, 0x91, 0x00,
            0x23, 0x3c, 0x11, 0x00, 0x13, 0x04, 0x05, 0x00, 0x37, 0x15, 0x02, 0x00,
            0xef, 0x00, 0x00, 0x02, 0x83, 0x30, 0x81, 0x01, 0x03, 0x34, 0x81, 0x00,
            0x83, 0x34, 0x01, 0x01, 0x13, 0x01, 0x01, 0x02, 0x67, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x67, 0x00, 0x03,
            0x03, 0xa7, 0x07, 0x20, 0x23, 0x20, 0xe5, 0x00, 0x03, 0xa7, 0x47, 0x20,
            0x23, 0x22, 0xe5, 0x00, 0x03, 0xa7, 0x87, 0x20, 0x23, 0x24, 0xe5, 0x00,
            0x83, 0xa7, 0xc7, 0x20, 0x23, 0x26, 0xf5, 0x00, 0x67, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    uint32_t id[1];

    fel_->fel_write(0x00020000, &payload[0], sizeof(payload));
    fel_->fel_exec(0x00020000);
    fel_->fel_read(0x00021000, id, sizeof(id));

    auto chip_id = id[0] & 0xffff;

    for (const auto &i: chip_id_map_) {
        if (i.first == chip_id) {
            chip_info.chip_name = i.second;
        }
    }
    return chip_function_e::Success;
}

chip_function_e d1::chip_detect() {
    if (chip_info.chip_version.id == chip_info.chip_id) {
        // Check 0 addr is 0x43014281, RISC-V
        if (fel_->fel_read32(0x00000000) == 0x43014281)
            return chip_function_e::Success;
    }
    return chip_function_e::Fail;
}

chip_function_e d1::chip_reset() {
    fel_->fel_write32(0x020500a0 + 0x08, (0x16aa << 16) | (0x1 << 0));
    return chip_function_e::Success;
}

chip_function_e d1::chip_sid() {
    const uint8_t payload[] = {
            0x37, 0x03, 0x40, 0x00, 0x73, 0x20, 0x03, 0x7c, 0x37, 0x03, 0x03, 0x00,
            0x1b, 0x03, 0x33, 0x01, 0x73, 0x20, 0x23, 0x7c, 0x6f, 0x00, 0x40, 0x00,
            0x13, 0x01, 0x01, 0xfe, 0x23, 0x34, 0x81, 0x00, 0x23, 0x38, 0x91, 0x00,
            0x23, 0x3c, 0x11, 0x00, 0x13, 0x04, 0x05, 0x00, 0x37, 0x15, 0x02, 0x00,
            0xef, 0x00, 0x00, 0x02, 0x83, 0x30, 0x81, 0x01, 0x03, 0x34, 0x81, 0x00,
            0x83, 0x34, 0x01, 0x01, 0x13, 0x01, 0x01, 0x02, 0x67, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x67, 0x00, 0x03,
            0x03, 0xa7, 0x07, 0x20, 0x23, 0x20, 0xe5, 0x00, 0x03, 0xa7, 0x47, 0x20,
            0x23, 0x22, 0xe5, 0x00, 0x03, 0xa7, 0x87, 0x20, 0x23, 0x24, 0xe5, 0x00,
            0x83, 0xa7, 0xc7, 0x20, 0x23, 0x26, 0xf5, 0x00, 0x67, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    uint32_t id[4];

    fel_->fel_write(0x00020000, &payload[0], sizeof(payload));
    fel_->fel_exec(0x00020000);
    fel_->fel_read(0x00021000, id, sizeof(id));

    chip_info.chip_sid = "";
    for (const uint32_t &j: id) {
        chip_info.chip_sid.append(QString::number(j, 16));
    }
    return chip_function_e::Success;
}

chip_function_e d1::chip_jtag() {
    const uint8_t payload[] = {
            0x37, 0x03, 0x40, 0x00, 0x73, 0x20, 0x03, 0x7c, 0x37, 0x03, 0x03, 0x00,
            0x1b, 0x03, 0x33, 0x01, 0x73, 0x20, 0x23, 0x7c, 0x6f, 0x00, 0x40, 0x00,
            0x13, 0x01, 0x01, 0xfe, 0x23, 0x34, 0x81, 0x00, 0x23, 0x38, 0x91, 0x00,
            0x23, 0x3c, 0x11, 0x00, 0x13, 0x04, 0x05, 0x00, 0xef, 0x00, 0x40, 0x02,
            0x83, 0x30, 0x81, 0x01, 0x03, 0x34, 0x81, 0x00, 0x83, 0x34, 0x01, 0x01,
            0x13, 0x01, 0x01, 0x02, 0x67, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x07, 0x00, 0x02,
            0x03, 0xa7, 0x07, 0x0f, 0xb7, 0x16, 0xff, 0xff, 0x93, 0x86, 0xf6, 0xff,
            0x13, 0x77, 0x07, 0xff, 0x13, 0x67, 0x47, 0x00, 0x23, 0xa8, 0xe7, 0x0e,
            0x03, 0xa7, 0x07, 0x0f, 0x13, 0x77, 0xf7, 0xf0, 0x13, 0x67, 0x07, 0x04,
            0x23, 0xa8, 0xe7, 0x0e, 0x03, 0xa7, 0x07, 0x0f, 0x33, 0x77, 0xd7, 0x00,
            0xb7, 0x46, 0x00, 0x00, 0x33, 0x67, 0xd7, 0x00, 0x23, 0xa8, 0xe7, 0x0e,
            0x03, 0xa7, 0x07, 0x0f, 0xb7, 0x06, 0x10, 0xff, 0x93, 0x86, 0xf6, 0xff,
            0x33, 0x77, 0xd7, 0x00, 0xb7, 0x06, 0x40, 0x00, 0x33, 0x67, 0xd7, 0x00,
            0x23, 0xa8, 0xe7, 0x0e, 0x67, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    fel_->fel_write(0x00020000, &payload[0], sizeof(payload));
    fel_->fel_exec(0x00020000);
    return chip_function_e::Success;
}

chip_function_e d1::chip_ddr(chip_ddr_type_e dram_type) {
    if (dram_type == chip_ddr_type_e::DDR3) {
        fel_->fel_write(0x00020000, &ddr3_dram_payload[0], sizeof(ddr3_dram_payload));
        fel_->fel_write(0x00020018, &ddr3, sizeof(ddr3));
        fel_->fel_exec(0x00020000);
        return chip_function_e::Success;
    } else if (dram_type == chip_ddr_type_e::DDR2) {
        fel_->fel_write(0x00020000, &ddr2_dram_payload[0], sizeof(ddr2_dram_payload));
        fel_->fel_write(0x00020018, &ddr2, sizeof(ddr2));
        fel_->fel_exec(0x00020000);
        return chip_function_e::Success;
    }
    return chip_function_e::NotSupport;
}

chip_function_e d1::chip_ddr(dram_param_t param) {
    if (param.dram_type == chip_ddr_type_e::DDR2) {
        fel_->fel_write(0x00020000, &ddr2_dram_payload[0], sizeof(ddr2_dram_payload));
    } else if (param.dram_type == chip_ddr_type_e::DDR3) {
        fel_->fel_write(0x00020000, &ddr3_dram_payload[0], sizeof(ddr3_dram_payload));
    } else {
        return chip_function_e::NotSupport;
    }
    fel_->fel_write(0x00020018, &param, sizeof(param));
    fel_->fel_exec(0x00020000);
    return chip_function_e::Success;
}

chip_function_e d1::chip_spi_init(uint32_t *swap_buf, uint32_t *swap_len, uint32_t *cmd_len) {
    const uint8_t payload[] = {
            0x37, 0x03, 0x40, 0x00, 0x73, 0x20, 0x03, 0x7c, 0x37, 0x03, 0x03, 0x00,
            0x1b, 0x03, 0x33, 0x01, 0x73, 0x20, 0x23, 0x7c, 0x6f, 0x00, 0x40, 0x00,
            0x13, 0x01, 0x01, 0xfe, 0x23, 0x34, 0x81, 0x00, 0x23, 0x38, 0x91, 0x00,
            0x23, 0x3c, 0x11, 0x00, 0x13, 0x04, 0x05, 0x00, 0x37, 0x15, 0x02, 0x00,
            0xef, 0x00, 0x00, 0x19, 0x83, 0x30, 0x81, 0x01, 0x03, 0x34, 0x81, 0x00,
            0x83, 0x34, 0x01, 0x01, 0x13, 0x01, 0x01, 0x02, 0x67, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x88, 0x05, 0x08,
            0x93, 0x0e, 0x00, 0x04, 0x13, 0x0e, 0x00, 0x04, 0xb7, 0x56, 0x02, 0x04,
            0x93, 0x08, 0xf0, 0xff, 0x37, 0x03, 0x00, 0x80, 0xb3, 0xb7, 0xbe, 0x00,
            0x13, 0x07, 0x0e, 0x00, 0x0b, 0x97, 0xf5, 0x40, 0x23, 0xa8, 0xe6, 0x02,
            0x93, 0x07, 0x07, 0x00, 0x23, 0xaa, 0xe6, 0x02, 0x23, 0xac, 0xf6, 0x02,
            0x1b, 0x07, 0x07, 0x00, 0x93, 0x07, 0x00, 0x00, 0x13, 0x86, 0x06, 0x20,
            0x23, 0x00, 0x16, 0x01, 0x9b, 0x87, 0x17, 0x00, 0xe3, 0xcc, 0xe7, 0xfe,
            0x83, 0xa7, 0x86, 0x00, 0xb3, 0xe7, 0x67, 0x00, 0x23, 0xa4, 0xf6, 0x00,
            0x83, 0xa7, 0xc6, 0x01, 0x93, 0xf7, 0xf7, 0x0f, 0xe3, 0xec, 0xe7, 0xfe,
            0x93, 0x07, 0x00, 0x00, 0x03, 0xc8, 0x06, 0x30, 0x13, 0x06, 0x05, 0x00,
            0x9b, 0x87, 0x17, 0x00, 0x13, 0x78, 0xf8, 0x0f, 0x63, 0x0e, 0x05, 0x00,
            0x0b, 0x58, 0x16, 0x18, 0x13, 0x05, 0x06, 0x00, 0xe3, 0xc2, 0xe7, 0xfe,
            0xbb, 0x85, 0xe5, 0x40, 0xe3, 0x96, 0x05, 0xf8, 0x67, 0x80, 0x00, 0x00,
            0x1b, 0x86, 0x17, 0x00, 0xe3, 0xd8, 0xe7, 0xfe, 0x03, 0xc8, 0x06, 0x30,
            0x9b, 0x87, 0x27, 0x00, 0xe3, 0x52, 0xe6, 0xfe, 0x03, 0xc6, 0x06, 0x30,
            0x1b, 0x86, 0x17, 0x00, 0xe3, 0xc6, 0xe7, 0xfe, 0xbb, 0x85, 0xe5, 0x40,
            0xe3, 0x90, 0x05, 0xf6, 0x6f, 0xf0, 0x5f, 0xfd, 0x63, 0x86, 0x05, 0x08,
            0x93, 0x0e, 0x00, 0x04, 0x13, 0x0e, 0x00, 0x04, 0xb7, 0x56, 0x02, 0x04,
            0x93, 0x08, 0xf0, 0xff, 0x37, 0x03, 0x00, 0x80, 0x33, 0xb7, 0xbe, 0x00,
            0x93, 0x07, 0x0e, 0x00, 0x8b, 0x97, 0xe5, 0x40, 0x1b, 0x87, 0x07, 0x00,
            0x23, 0xa8, 0xe6, 0x02, 0x23, 0xaa, 0xe6, 0x02, 0x23, 0xac, 0xe6, 0x02,
            0x93, 0x07, 0x00, 0x00, 0x63, 0x0c, 0x05, 0x04, 0x13, 0x00, 0x00, 0x00,
            0x0b, 0x48, 0xf5, 0x80, 0x93, 0x87, 0x17, 0x00, 0x1b, 0x86, 0x07, 0x00,
            0x23, 0x80, 0x06, 0x21, 0xe3, 0x48, 0xe6, 0xfe, 0x83, 0xa7, 0x86, 0x00,
            0xb3, 0xe7, 0x67, 0x00, 0x23, 0xa4, 0xf6, 0x00, 0x83, 0xa7, 0xc6, 0x01,
            0x93, 0xf7, 0xf7, 0x0f, 0xe3, 0xec, 0xe7, 0xfe, 0x93, 0x07, 0x00, 0x00,
            0x03, 0xc6, 0x06, 0x30, 0x9b, 0x87, 0x17, 0x00, 0xe3, 0xcc, 0xe7, 0xfe,
            0xb3, 0x07, 0xe5, 0x00, 0xbb, 0x85, 0xe5, 0x40, 0x0b, 0x95, 0xa7, 0x42,
            0xe3, 0x98, 0x05, 0xf8, 0x67, 0x80, 0x00, 0x00, 0x13, 0x86, 0x06, 0x20,
            0x13, 0x00, 0x00, 0x00, 0x23, 0x00, 0x16, 0x01, 0x9b, 0x87, 0x17, 0x00,
            0xe3, 0xcc, 0xe7, 0xfe, 0x6f, 0xf0, 0x1f, 0xfb, 0x13, 0x00, 0x00, 0x00,
            0x13, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0xf9, 0x13, 0x07, 0x05, 0x00,
            0x23, 0x30, 0x41, 0x05, 0x23, 0x3c, 0x51, 0x03, 0x23, 0x38, 0x61, 0x03,
            0x23, 0x34, 0x71, 0x03, 0x23, 0x30, 0x81, 0x03, 0x23, 0x34, 0x11, 0x06,
            0x23, 0x30, 0x81, 0x06, 0x23, 0x3c, 0x91, 0x04, 0x23, 0x38, 0x21, 0x05,
            0x23, 0x34, 0x31, 0x05, 0x23, 0x3c, 0x91, 0x01, 0x13, 0x0c, 0x07, 0x00,
            0x8b, 0x47, 0x1c, 0x98, 0xb7, 0xcb, 0xff, 0xff, 0x37, 0xfb, 0xff, 0xff,
            0xb7, 0x1a, 0xff, 0xff, 0x37, 0x0a, 0xf1, 0xff, 0x93, 0x06, 0x10, 0x00,
            0x9b, 0x8b, 0xfb, 0x00, 0x13, 0x0b, 0xfb, 0x0f, 0x93, 0x8a, 0xfa, 0xff,
            0x13, 0x0a, 0xfa, 0xff, 0x63, 0x8a, 0xd7, 0x0a, 0x13, 0x00, 0x00, 0x00,
            0x93, 0x06, 0x20, 0x00, 0x63, 0x80, 0xd7, 0x1c, 0x93, 0x06, 0x30, 0x00,
            0x63, 0x88, 0xd7, 0x1c, 0x93, 0x06, 0x40, 0x00, 0x63, 0x82, 0xd7, 0x1e,
            0x93, 0x06, 0x50, 0x00, 0x63, 0x8e, 0xd7, 0x1e, 0x13, 0x06, 0x60, 0x00,
            0x63, 0x86, 0xc7, 0x20, 0x13, 0x07, 0x70, 0x00, 0x63, 0x8e, 0xe7, 0x20,
            0x13, 0x07, 0x80, 0x00, 0x63, 0x94, 0xe7, 0x24, 0x23, 0x10, 0x71, 0x01,
            0x93, 0x04, 0x01, 0x00, 0x37, 0x54, 0x02, 0x04, 0x93, 0x0c, 0x10, 0x00,
            0x93, 0x09, 0xf0, 0xff, 0x37, 0x09, 0x00, 0x80, 0x93, 0x05, 0x20, 0x00,
            0x13, 0x85, 0x04, 0x00, 0xef, 0xf0, 0x1f, 0xe9, 0x23, 0x28, 0x94, 0x03,
            0x23, 0x2a, 0x94, 0x03, 0x23, 0x2c, 0x94, 0x03, 0x23, 0x00, 0x34, 0x21,
            0x83, 0x27, 0x84, 0x00, 0xb3, 0xe7, 0x27, 0x01, 0x23, 0x24, 0xf4, 0x00,
            0x83, 0x27, 0xc4, 0x01, 0x93, 0xf7, 0xf7, 0x0f, 0xe3, 0x8c, 0x07, 0xfe,
            0x83, 0x47, 0x04, 0x30, 0x93, 0xf7, 0xf7, 0x0f, 0x23, 0x04, 0xf1, 0x00,
            0x93, 0xf7, 0x17, 0x00, 0xe3, 0x9e, 0x07, 0xfa, 0x13, 0x07, 0x0c, 0x00,
            0x13, 0x0c, 0x07, 0x00, 0x8b, 0x47, 0x1c, 0x98, 0x93, 0x06, 0x10, 0x00,
            0xe3, 0x9c, 0xd7, 0xf4, 0x37, 0x07, 0x00, 0x02, 0x83, 0x27, 0x07, 0x06,
            0xb7, 0x26, 0x00, 0x00, 0x37, 0x06, 0x02, 0x00, 0xb3, 0xf7, 0x67, 0x01,
            0x93, 0xe7, 0x07, 0x20, 0x23, 0x20, 0xf7, 0x06, 0x83, 0x27, 0x07, 0x06,
            0x37, 0x05, 0x00, 0xfd, 0x13, 0x05, 0xf5, 0xff, 0xb3, 0xf7, 0x57, 0x01,
            0xb3, 0xe7, 0xd7, 0x00, 0x23, 0x20, 0xf7, 0x06, 0x83, 0x26, 0x07, 0x06,
            0xb7, 0x27, 0x00, 0x02, 0xb7, 0x55, 0x02, 0x04, 0xb3, 0xf6, 0x46, 0x01,
            0xb3, 0xe6, 0xc6, 0x00, 0x23, 0x20, 0xd7, 0x06, 0x83, 0x26, 0x07, 0x06,
            0x37, 0x06, 0x10, 0xff, 0x13, 0x06, 0xf6, 0xff, 0xb3, 0xf6, 0xc6, 0x00,
            0x37, 0x06, 0x20, 0x00, 0xb3, 0xe6, 0xc6, 0x00, 0x23, 0x20, 0xd7, 0x06,
            0x03, 0xa7, 0xc7, 0x96, 0xb7, 0x06, 0x01, 0x00, 0x37, 0x06, 0x00, 0x80,
            0x33, 0x67, 0xd7, 0x00, 0x23, 0xa6, 0xe7, 0x96, 0x03, 0xa7, 0x07, 0x94,
            0xb7, 0x06, 0x00, 0x80, 0x1b, 0x06, 0x36, 0x08, 0x33, 0x67, 0xd7, 0x00,
            0x23, 0xa0, 0xe7, 0x94, 0x03, 0xa7, 0xc7, 0x96, 0x13, 0x67, 0x17, 0x00,
            0x23, 0xa6, 0xe7, 0x96, 0x83, 0xa6, 0x07, 0x94, 0x37, 0x57, 0x02, 0x04,
            0xb3, 0xf6, 0xa6, 0x00, 0x37, 0x05, 0x00, 0x01, 0xb3, 0xe6, 0xa6, 0x00,
            0x23, 0xa0, 0xd7, 0x94, 0x83, 0xa6, 0x07, 0x94, 0x93, 0xf6, 0xf6, 0xcf,
            0x23, 0xa0, 0xd7, 0x94, 0x83, 0xa6, 0x07, 0x94, 0x93, 0xf6, 0x06, 0xff,
            0x93, 0xe6, 0x56, 0x00, 0x23, 0xa0, 0xd7, 0x94, 0xb7, 0x17, 0x00, 0x00,
            0x23, 0xa2, 0xf5, 0x02, 0x83, 0xa7, 0x45, 0x00, 0xb3, 0x67, 0xf6, 0x00,
            0x23, 0xa2, 0xf5, 0x00, 0x83, 0x27, 0x47, 0x00, 0x93, 0x96, 0x07, 0x02,
            0xe3, 0xcc, 0x06, 0xfe, 0x83, 0x27, 0x87, 0x00, 0xb7, 0x86, 0x00, 0x80,
            0x93, 0xf7, 0xc7, 0xff, 0x93, 0xe7, 0x47, 0x04, 0x23, 0x24, 0xf7, 0x00,
            0x83, 0x27, 0x87, 0x01, 0xb3, 0xe7, 0xd7, 0x00, 0x23, 0x2c, 0xf7, 0x00,
            0x13, 0x07, 0x0c, 0x00, 0x6f, 0xf0, 0xdf, 0xed, 0x37, 0x57, 0x02, 0x04,
            0x83, 0x27, 0x87, 0x00, 0x93, 0xf7, 0xf7, 0xf4, 0x23, 0x24, 0xf7, 0x00,
            0x13, 0x07, 0x0c, 0x00, 0x6f, 0xf0, 0x5f, 0xec, 0x37, 0x57, 0x02, 0x04,
            0x83, 0x27, 0x87, 0x00, 0x93, 0xf7, 0xf7, 0xf4, 0x93, 0xe7, 0x07, 0x08,
            0x23, 0x24, 0xf7, 0x00, 0x13, 0x07, 0x0c, 0x00, 0x6f, 0xf0, 0x9f, 0xea,
            0x03, 0x44, 0x17, 0x00, 0x13, 0x05, 0x27, 0x00, 0x93, 0x05, 0x04, 0x00,
            0x13, 0x04, 0x14, 0x00, 0xef, 0xf0, 0x1f, 0xce, 0x33, 0x0c, 0x8c, 0x00,
            0x13, 0x07, 0x0c, 0x00, 0x6f, 0xf0, 0x9f, 0xe8, 0x83, 0x25, 0x57, 0x00,
            0x03, 0x65, 0x17, 0x00, 0x13, 0x0c, 0x97, 0x00, 0xef, 0xf0, 0x5f, 0xcc,
            0x13, 0x07, 0x0c, 0x00, 0x6f, 0xf0, 0x1f, 0xe7, 0x83, 0x25, 0x57, 0x00,
            0x03, 0x65, 0x17, 0x00, 0x13, 0x0c, 0x97, 0x00, 0xef, 0xf0, 0xdf, 0xbe,
            0x13, 0x07, 0x0c, 0x00, 0x6f, 0xf0, 0x9f, 0xe5, 0x23, 0x00, 0xd1, 0x00,
            0x93, 0x04, 0x01, 0x00, 0x93, 0x05, 0x10, 0x00, 0x13, 0x85, 0x04, 0x00,
            0xef, 0xf0, 0x1f, 0xc9, 0x93, 0x05, 0x10, 0x00, 0x13, 0x05, 0x81, 0x00,
            0xef, 0xf0, 0x5f, 0xbc, 0x83, 0x47, 0x81, 0x00, 0x93, 0xf7, 0x17, 0x00,
            0xe3, 0x90, 0x07, 0xfe, 0x13, 0x07, 0x0c, 0x00, 0x6f, 0xf0, 0x5f, 0xe2,
            0x83, 0x30, 0x81, 0x06, 0x03, 0x34, 0x01, 0x06, 0x83, 0x34, 0x81, 0x05,
            0x03, 0x39, 0x01, 0x05, 0x83, 0x39, 0x81, 0x04, 0x03, 0x3a, 0x01, 0x04,
            0x83, 0x3a, 0x81, 0x03, 0x03, 0x3b, 0x01, 0x03, 0x83, 0x3b, 0x81, 0x02,
            0x03, 0x3c, 0x01, 0x02, 0x83, 0x3c, 0x81, 0x01, 0x13, 0x01, 0x01, 0x07,
            0x67, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
    };
    fel_->fel_write(0x00020000, &payload[0], sizeof(payload));
    if (swap_buf)
        *swap_buf = 0x00022000;
    if (swap_len)
        *swap_len = 65536;
    if (cmd_len)
        *cmd_len = 4096;
    return chip_function_e::Success;
}

chip_function_e d1::chip_spi_run(uint8_t *cbuf, uint32_t clen) {
    fel_->fel_write(0x00021000, cbuf, clen);
    fel_->fel_exec(0x00020000);
    return chip_function_e::Success;
}