/*
 * Copyright (c) 2022, YuzukiTsuru <GloomyGhost@GloomyGhost.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * See README and LICENSE for more details.
 */

//
// Created by gloom on 2022/9/23.
//

#include "r528.h"

r528::r528(class fel *f, chip_version_t chip_version) : Chips(f, chip_version) {
    chip_info.chip_name = "R528-S1/R528-S2/R528-S3/R528-S4/T113-I/T113-S3/H133";
    chip_info.chip_id = 0x00185900;
    chip_info.chip_type = chip_type_e::Heterogeneous;
    chip_info.chip_core = core_name_.CortexA7;
    chip_info.chip_core_count = 2;
    chip_info.chip_core_count_str = core_count_.core_count_2;
    chip_info.chip_heterogeneous_core.push_back("HIFI4");
}

chip_function_e r528::chip_detect() {
    if (chip_info.chip_version.id == chip_info.chip_id)
        // Check 0 addr is 0x43014281, ARM Cortex-A7
        if (fel_->fel_read32(0x00000000) == 0xea000019)
            return chip_function_e::Success;
    return chip_function_e::Fail;
}

chip_function_e r528::chip_reset() {
    // Timer::WDOG_IRQ_EN_REG
    fel_->fel_write32(0x020500a0 + 0x08, (0x16aa << 16) | (0x1 << 0));
    return chip_function_e::Success;
}

chip_function_e r528::chip_sid() {
    uint32_t id[4];
    id[0] = fel_->payload_arm_read32(0x03006200 + 0x0);
    id[1] = fel_->payload_arm_read32(0x03006200 + 0x4);
    id[2] = fel_->payload_arm_read32(0x03006200 + 0x8);
    id[3] = fel_->payload_arm_read32(0x03006200 + 0xc);

    chip_info.chip_sid = "";
    for (const uint32_t &j: id) {
        chip_info.chip_sid.append(QString::number(j, 16));
    }
    return chip_function_e::Success;
}

chip_function_e r528::chip_jtag() {
    const uint8_t payload[] = {
            0x00, 0x00, 0xa0, 0xe3, 0x17, 0x0f, 0x08, 0xee, 0x15, 0x0f, 0x07, 0xee,
            0xd5, 0x0f, 0x07, 0xee, 0x9a, 0x0f, 0x07, 0xee, 0x95, 0x0f, 0x07, 0xee,
            0xff, 0xff, 0xff, 0xea, 0x58, 0x00, 0x9f, 0xe5, 0x00, 0xd0, 0x80, 0xe5,
            0x04, 0xe0, 0x80, 0xe5, 0x00, 0xe0, 0x0f, 0xe1, 0x08, 0xe0, 0x80, 0xe5,
            0x10, 0xef, 0x11, 0xee, 0x0c, 0xe0, 0x80, 0xe5, 0x10, 0xef, 0x1c, 0xee,
            0x10, 0xe0, 0x80, 0xe5, 0x10, 0xef, 0x11, 0xee, 0x14, 0xe0, 0x80, 0xe5,
            0x0c, 0x00, 0x00, 0xeb, 0x28, 0x00, 0x9f, 0xe5, 0x00, 0xd0, 0x90, 0xe5,
            0x04, 0xe0, 0x90, 0xe5, 0x14, 0x10, 0x90, 0xe5, 0x10, 0x1f, 0x01, 0xee,
            0x10, 0x10, 0x90, 0xe5, 0x10, 0x1f, 0x0c, 0xee, 0x0c, 0x10, 0x90, 0xe5,
            0x10, 0x1f, 0x01, 0xee, 0x08, 0x10, 0x90, 0xe5, 0x01, 0xf0, 0x29, 0xe1,
            0x1e, 0xff, 0x2f, 0xe1, 0xe0, 0x7f, 0x04, 0x00, 0x02, 0x34, 0xa0, 0xe3,
            0xf0, 0x20, 0x93, 0xe5, 0x0f, 0x20, 0xc2, 0xe3, 0x03, 0x20, 0x82, 0xe3,
            0xf0, 0x20, 0x83, 0xe5, 0xf0, 0x20, 0x93, 0xe5, 0xf0, 0x20, 0xc2, 0xe3,
            0x30, 0x20, 0x82, 0xe3, 0xf0, 0x20, 0x83, 0xe5, 0xf0, 0x20, 0x93, 0xe5,
            0x0f, 0x2a, 0xc2, 0xe3, 0x03, 0x2a, 0x82, 0xe3, 0xf0, 0x20, 0x83, 0xe5,
            0xf0, 0x20, 0x93, 0xe5, 0x0f, 0x26, 0xc2, 0xe3, 0x03, 0x26, 0x82, 0xe3,
            0xf0, 0x20, 0x83, 0xe5, 0x1e, 0xff, 0x2f, 0xe1, 0x04, 0x00, 0x00, 0x00,
            0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x4e, 0x55, 0x00,
            0xe4, 0x69, 0x4d, 0x72, 0xa6, 0x44, 0x29, 0x93, 0x6b, 0x31, 0xb1, 0x33,
            0x26, 0xa9, 0xde, 0x4e, 0xce, 0x0e, 0x29, 0xd6, 0x2f, 0x6c, 0x69, 0x62,
            0x2f, 0x6c, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2d, 0x61, 0x72,
            0x6d, 0x68, 0x66, 0x2e, 0x73, 0x6f, 0x2e, 0x33, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xf5, 0xfe, 0xff, 0x6f, 0x1c, 0x81, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,
            0x18, 0x81, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08, 0x81, 0x02, 0x00,
            0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x1e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xfb, 0xff, 0xff, 0x6f,
            0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x38, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
    };
    fel_->fel_write(0x00028000, &payload[0], sizeof(payload));
    fel_->fel_exec(0x00028000);
    return chip_function_e::Success;
}

chip_function_e r528::chip_ddr(chip_ddr_type_e dram_type) {
    return chip_function_e::NotSupport;
}

chip_function_e r528::chip_spi_init(uint32_t *swap_buf, uint32_t *swap_len, uint32_t *cmd_len) {
    return chip_function_e::NotSupport;
}

chip_function_e r528::chip_spi_run(uint8_t *cbuf, uint32_t clen) {
    return chip_function_e::NotSupport;
}
